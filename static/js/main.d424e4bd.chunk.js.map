{"version":3,"sources":["containers/DevTools.js","reducers/movies.js","constants/actionTypes.js","reducers/selectedmovies.js","reducers/index.js","middleware/api.js","store/index.js","store/configureStore.js","containers/root.js","serviceWorker.js","index.js"],"names":["createDevTools","toggleVisibilityKey","changePositionKey","handleActions","state","action","combineReducers","movies","selectedMovie","api","getState","dispatch","next","store","createStore","rootReducer","compose","applyMiddleware","logger","DevTools","instrument","configureStore","StrictMode","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4MAKeA,2BACb,kBAAC,IAAD,CAAaC,oBAAoB,SAASC,kBAAkB,UAC1D,kBAAC,IAAD,Q,yCCJWC,cAAc,eCHH,cDIR,SAACC,EAAOC,GAAR,OAAmBD,KACnC,IEFaD,cAAc,eDFD,gBCIR,SAACC,EAAOC,GAAR,OAAmBD,KAErC,GCHaE,cAAgB,CAC3BC,SACAC,kBCFaC,EAJL,SAAC,GAAD,EAAGC,SAAH,EAAaC,SAAb,OAA4B,SAAAC,GAAI,OAAI,SAAAP,GAC5CO,EAAKP,MCEMQ,ECGQ,WAQrB,OAPcC,YAAYC,EAAaC,YAAQC,YAAgBR,EAAIS,KAAQC,EAASC,eDLxEC,GEGC,aACZ,OAAS,kBAAC,IAAMC,WAAP,KACR,kBAAC,WAAD,CAAUT,MAAOA,GACf,6BACE,oDACA,kBAACM,EAAD,UCEYI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d424e4bd.chunk.js","sourcesContent":["import React from \"react\";\nimport { createDevTools } from \"redux-devtools\";\nimport DockMonitor from \"redux-devtools-dock-monitor\";\nimport LogMonitor from \"redux-devtools-log-monitor\";\n\nexport default createDevTools(\n  <DockMonitor toggleVisibilityKey=\"ctrl-h\" changePositionKey=\"ctrl-q\">\n    <LogMonitor />\n  </DockMonitor>\n);","import { handleActions} from 'redux-actions';\nimport { GET_MOVIES } from \"../constants/actionTypes\"\n\nexport default handleActions({\n    [GET_MOVIES]: (state, action) => state \n},{});","export const GET_MOVIES = \"GET_MOVIES\";\nexport const SELECT_MOVIE = \"SELECT_MOVIE\";","import { handleActions } from \"redux-actions\";\nimport { SELECT_MOVIE } from \"../constants/actionTypes\";\n\nexport default handleActions(\n  {\n    [SELECT_MOVIE]: (state, action) => state\n  },\n  1\n);","import { combineReducers} from 'redux';\nimport movies from './movies';\nimport selectedMovie from './selectedmovies';\n\nexport default combineReducers({\n    movies,\n    selectedMovie\n});","const api = ({ getState, dispatch }) => next => action => {\n    next(action);\n  };\n  \n  export default api;","import configureStore from \"./configureStore\";\n\nconst store = configureStore();\nexport default store;","import { createStore, applyMiddleware, compose } from \"redux\";\nimport logger from 'redux-logger'\nimport rootReducer from \"../reducers\";\nimport api from \"../middleware/api\";\nimport DevTools from \"../containers/DevTools\";\n\nconst configureStore = () => {\n  const store = createStore(rootReducer, compose(applyMiddleware(api,logger),DevTools.instrument()));\n  if (module.hot) {\n    // Enable Webpack hot module replacement for reducers\n    module.hot.accept('../reducers', () => {\n      store.replaceReducer(rootReducer)\n    })\n  }\n  return store;\n};\n\nexport default configureStore;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport DevTools from './DevTools';\nimport store from '../store'\n\nexport default ()=>{\n   return  (<React.StrictMode>\n    <Provider store={store}>\n      <div>\n        <h1>Hello root component</h1>\n        <DevTools/>\n      </div>\n    </Provider>\n  </React.StrictMode>)\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from './containers/root';\n\nimport * as serviceWorker from './serviceWorker';\n\n \nReactDOM.render(\n  <Root/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}